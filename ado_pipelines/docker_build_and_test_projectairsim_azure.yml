#
# Azure pipeline to build and test ubuntu 22.04 docker artifacts
# 
parameters:
- name: docker_unreal_image
  type: string 
  default: hameritt.azurecr.io/epicgames/unreal-engine:ubuntu22-dev-5.2.1
- name: dockerfile
  type: string 
  default: binary_projectairsim.Dockerfile
- name: build_binary_container
  type: boolean 
  default: true
- name: delete_binary_container
  type: boolean 
  default: false
- name: docker_target_image
  type: string
  default: project_airsim_str
- name: docker_staging_image
  type: string
  default: project_airsim_staging
- name: ros2_distro
  type: string 
  default: humble
- name: docker_base_image
  type: string
  default: project_airsim_pipeline_ros2
- name: docker_base_image_tag
  type: string
  default: 22.04
- name: docker_source_repo
  type: string
  default: hameritt.azurecr.io
- name: docker_target_repo
  type: string
  default: hameritt.azurecr.io
- name: envName
  type: string
  default: Blocks
- name: envRelease
  type: string
  default: DebugGame
- name: environmentRepoRoot
  type: string
  default: Blocks/DebugGame/Linux
- name: neighborhood_branch
  type: string
  default: neighborhood
- name: neighborhood_branch_rev
  type: string
  default: neighborhood_revised
- name: city_branch
  type: string
  default: city
- name: cesium_plugin_name
  type: string
  default: CesiumForUnreal
- name: cesium_release
  type: string
  default: CesiumForUnreal-52-v2.11.0
- name: cesium_release_url
  type: string
  default: https://github.com/CesiumGS/cesium-unreal/releases/download/v2.11.0/
- name: use_cesium
  type: boolean
  default: false
- name: RunTests
  type: boolean
  default: false
- name: environments_list
  type: object
  default:
    - envName: Neighborhood
      projectName: AirSimNH
      repository: hameritt-env-rev
      envRepoRoot: hameritt-env-rev
      plugin_copy_type: plugin
      airsim_plugin_path: ProjectAirSim/packages/projectairsim_ue_plugin/Plugins
      use_cesium: false
    - envName: CityEnviron
      projectName: CityEnviron
      repository: hameritt-env-city
      envRepoRoot: hameritt-env-city
      plugin_copy_type: plugin
      airsim_plugin_path: ProjectAirSim/packages/projectairsim_ue_plugin/Plugins
      use_cesium: false

variables:
  vmss_pool: 'VMSS Agents Pool'
  dockerRegistryServiceConnection: 'hameritt_acr_service_connection'
  UE_ROOT: /home/ue4/UnrealEngine
  HOME: /__w/_temp

trigger:
  branches:
    include:
      - refs/tags/*
      - releases/*
  tags:
    include:
      - '*'
      
resources:
  repositories:
  - repository: hameritt-env-rev
    type: github
    endpoint: johnnovak_connection
    ref: neighborhood_revised
    name: microsoft/hameritt-env
  - repository: hameritt-env-city
    type: github
    ref: city_revised
    endpoint: johnnovak_connection
    name: microsoft/hameritt-env
  - repository: hameritt-env-cesium
    type: github
    ref: cesium_pa_mrp
    endpoint: johnnovak_connection
    name: microsoft/hameritt-env
  - repository: ProjectAirSim
    type: github
    endpoint: johnnovak_connection
    name: microsoft/ProjectAirSim

  containers:
  - container: unreal5
    image: ${{ parameters.docker_unreal_image }}
    endpoint: 'hameritt_acr_service_connection'
    options: --user 0:0
  - container: ros2_build
    image: ${{ parameters.docker_base_image }}_${{ parameters.ros2_distro }}:${{ parameters.docker_base_image_tag }}
    endpoint: 'hameritt_acr_service_connection'
    options: --user 0:0
    ports:
    - 9989:8989
    - 9990:8990

stages:
    # ----------------------------------------------------------------------------

  - stage: Build_Base_Artifacts
    dependsOn: []  # run in parallel

    jobs:  
    - job: UbuntuBuildProjectAirSim
      pool:
        name: $(vmss_pool)
      container: unreal5
      timeoutInMinutes: 240
      displayName: 'Build Ubuntu docker container with ProjectAirSim code'
      steps:
    
      - checkout: self
        path: ProjectAirSim
        lfs: true
        target: host
    
      # Dotnet core sdk task 7.0.x
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 7.0.x'
        inputs:
          version: 7.0.x
    
      - task: Docker@2
        displayName: Login to Azure Container Registry
        inputs:
          command: login
          containerRegistry: $(dockerRegistryServiceConnection)
        
      - script: |
          mkdir -p  $(Pipeline.Workspace)/tmp
          sudo chmod -R 777 $(Pipeline.Workspace)/tmp
        displayName: create tmp folder for builds
        target: host
        
      # ADO pipeline runs as a non-root user so need to take ownership of
      # UE engine's dotnet folder (UE 5.1 runs
      # a `chmod u+x "$UE_DOTNET_DIR/dotnet"` command in SetupDotnet.sh)
      - script: |
          cur_user=$(whoami)
          echo "sudo chown -R ${cur_user} $(UE_ROOT)"
          sudo chown -R ${cur_user} $(UE_ROOT)/Engine/Binaries/ThirdParty/DotNet/
          sudo chmod -R 777 $(UE_ROOT)/Engine/Binaries/ThirdParty/DotNet/
          sudo chown -R ${cur_user} $(UE_ROOT)/Epic
          sudo chmod -R 777 $(UE_ROOT)/Epic
        displayName: Take ownership of UE's folders
        target: unreal5
         
      - checkout: hameritt-env-rev
        path: hameritt-env-rev
        lfs: true
        target: host
        
      - checkout: hameritt-env-city
        path: hameritt-env-city
        lfs: true
        target: host
        
      - template: ./templates/build_projectairsim_unreal_plugin.yml
        parameters:
          sourcePath: $(Pipeline.Workspace)/ProjectAirSim

      - script: |
          sudo apt-get install -y wget
          wget -q ${{ parameters.cesium_release_url }}/${{ parameters.cesium_release }}.zip -P $(Pipeline.Workspace)
          unzip -q $(Pipeline.Workspace)/${{ parameters.cesium_release }}.zip -d $(Pipeline.Workspace)
          rm $(Pipeline.Workspace)/${{ parameters.cesium_release }}.zip
          ls -la $(Pipeline.Workspace)
        displayName: 'Download and extract Cesium Plugin'
        condition: ${{parameters.use_cesium }}
        target: host

      - script: |
          echo "Path to extracted Cesium Plugin"
          ls -la $(Pipeline.Workspace)/${{ parameters.cesium_plugin_name }}
          cp -r $(Pipeline.Workspace)/${{ parameters.cesium_plugin_name }} $(Pipeline.Workspace)/ProjectAirSim/unreal/Blocks/Plugins
          sudo chmod -R 777 $(Pipeline.Workspace)/ProjectAirSim/unreal/Blocks/Plugins
          ls -la $(Pipeline.Workspace)/ProjectAirSim/unreal/Blocks/Plugins
          ls -la $(Pipeline.Workspace)/ProjectAirSim/unreal/Blocks/Plugins/CesiumForUnreal/Source/CesiumRuntime/Public
        displayName: 'Install Cesium plugin'
        condition: ${{ parameters.use_cesium }}
        target: host
    
      # Package UE Plugin
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          bash ./build.sh package_plugin
        displayName: Package UE Plugin
        condition: succeededOrFailed()
        
      # Build and package UE Blocks project (DebugGame)
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          bash ./build.sh package_blocks_debuggame
        displayName: Build Blocks for DebugGame (Debug)
    
      # Build and package UE Blocks project (Development)
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          bash ./build.sh package_blocks_development
        displayName: Build Blocks for Development (Release)
    
      # Package UE game as Shipping config
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          bash ./build.sh package_blocks_shipping
        displayName: Package Blocks for Shipping (Release)
    
      # Add linux prereq setup script to binary package
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          cp setup_linux_unreal_prereqs.sh $(Pipeline.Workspace)/ProjectAirSim/packages/Blocks
        displayName: Add linux prereq setup script to binary package
    
      # Build and install Python client package
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          sudo apt-get -y install python3.10 python3.10-dev python3.10-venv
          python3 -m venv airsimenv
          source ./airsimenv/bin/activate
          python3 -m pip install --upgrade pip setuptools wheel
          cd client/python/projectairsim && python setup.py bdist_wheel
          python3 -m pip install --find-links=./dist projectairsim[datacollection]
        displayName: Build and install Python client package
        condition: succeededOrFailed()
        target: ros2_build
    
      # Build and install Python client package
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          sudo apt-get -y install python3.10 python3.10-dev python3.10-venv
          python3 -m venv airsimenv
          source ./airsimenv/bin/activate
          python3 -m pip install --upgrade pip setuptools wheel
          cd client/python/projectairsim && python setup.py bdist_wheel
          python3 -m pip install --find-links=./dist projectairsim[datacollection]
        displayName: Build and install Python client package
        condition: succeededOrFailed()
        target: host
    
      # Fetch PX4 source repos
      - template: ./templates/build_px4.yml
        parameters:
          working_directory: $(Pipeline.Workspace)
          repo_directory: ProjectAirSim/ros
          ros2_distro: ${{ parameters.ros2_distro }}

      # Build Project AirSim ROS2 package
      - script: |
          source /opt/ros/${{ parameters.ros2_distro }}/setup.bash
          cd $(Pipeline.Workspace)/ProjectAirSim/ros/
          colcon build
        displayName: 'Build ros2 node(s)'
        condition: succeededOrFailed()
        target: ros2_build
    
      # Install Project AirSim ROS2 package
      - script: |
          source $(Pipeline.Workspace)/ProjectAirSim/ros/install/setup.bash
          pip3 install -e $(Pipeline.Workspace)/ProjectAirSim/ros/node/projectairsim-rosbridge
          pip3 install -e $(Pipeline.Workspace)/ProjectAirSim/ros/node/projectairsim-ros2
        displayName: Build and install Project AirSim ROS2 package
        condition: succeededOrFailed()
        target: ros2_build
    
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          sudo apt-get install python3-pip -y
          source ./airsimenv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install pytest pytest-cov pytest-asyncio pytest-timeout
          sudo apt install net-tools
        displayName: Install and upgrade pip on host
        target: host
    
      # Run end-end tests on host
      - script: |
          echo "running blocks on host" 
          bash $(Pipeline.Workspace)/ProjectAirSim/packages/Blocks/Shipping/Linux/Blocks.sh -RenderOffScreen &
          sleep 20
        displayName: Launch UE game in background
        target: host
    
      - script: |
          echo "No shipping logs"
          # cat ./packages/Blocks/DebugGame/Linux/Blocks/Saved/Logs/Blocks.log
        displayName: cat log file
        target: host
        
      - script: |
          pushd $(Pipeline.Workspace)/ProjectAirSim
          source ./airsimenv/bin/activate
          cd client/python/projectairsim/tests && python3 -m pytest -v --junitxml=pytest-results.xml
        displayName: Run pytest for python client end-end tests
        condition: ${{ eq(parameters.RunTests, true) }}
        target: host
        
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '$(Pipeline.Workspace)/ProjectAirSim/**/pytest-*.xml'
          testRunTitle: 'End-end Python Client Tests'
        displayName: Publish end-end test results
        condition: ${{ eq(parameters.RunTests, true) }}
        target: host
    
      # Publish sim logs as a build artifact
      - task: CopyFiles@2
        inputs:
          contents: |
            client/python/**/*.log
            packages/Blocks/**/*.log
          targetFolder: $(Build.ArtifactStagingDirectory)
        displayName: Stage sim log files as build artifact
        condition: ${{ eq(parameters.RunTests, true) }}
        
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: SimLogs_Linux64
        displayName: Publish build artifacts
        condition: ${{ eq(parameters.RunTests, true) }}
        target: host
      #    
      # Build composite container with ros2 nodes and binaries installed
      #
      #  Might need to add release type for environment parameter
      #
      - script: |
          cd $(Pipeline.Workspace)
          
          sudo docker build --network=host \
              -t ${{ parameters.docker_source_repo }}/${{ parameters.docker_staging_image }}:$(Build.SourceBranchName)-${{ parameters.envName }} \
              -t ${{ parameters.docker_source_repo }}/${{ parameters.docker_target_image }}:$(Build.SourceBranchName)-${{ parameters.envName }} \
              -f $(Pipeline.Workspace)/ProjectAirSim/docker/${{ parameters.dockerfile }} \
              --build-arg BASE_IMAGE=${{ parameters.docker_source_repo }}/${{ parameters.docker_base_image }}_${{ parameters.ros2_distro }}:${{ parameters.docker_base_image_tag }} \
              --build-arg AIRSIMENV_DIR=${{ parameters.environmentRepoRoot }} \
              --build-arg AIRSIM_ENV_SCRIPT=${{ parameters.envName }} \
              --build-arg ROS2_DISTRO=${{ parameters.ros2_distro }} \
              .
        displayName: 'Build composite container with ros2 nodes'
        condition: succeededOrFailed()
        target: host
    
      - task: Docker@2
        displayName: Publish image to Staging Azure Container Registry
        condition: succeededOrFailed()
        target: host
        inputs:
          command: Push
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: ${{ parameters.docker_staging_image }}
          tags: |
            $(Build.SourceBranchName)-${{ parameters.envName }}

      # Run integration and end to end ROS2 tests
      #- template: ./templates/pytest_integration.yml
      #  parameters:
      #    dockerimage: ${{ parameters.docker_source_repo }}/${{ parameters.docker_staging_image }}:$(Build.SourceBranchName)-${{ parameters.envName }}
    
      - template: ./templates/colcon_test_docker.yml
        parameters:
          dockerimage: ${{ parameters.docker_source_repo }}/${{ parameters.docker_staging_image }}:$(Build.SourceBranchName)-${{ parameters.envName }}
    
      # Publish docker release container
      - task: Docker@2
        displayName: Publish image to Release Azure Container Registry
        condition: succeededOrFailed()
        target: host
        inputs:
          command: Push
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: ${{ parameters.docker_target_image }}
          tags: |
            $(Build.SourceBranchName)-${{ parameters.envName }}
     
      # Publish Artifact for Unreal plugin
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Pipeline.Workspace)/ProjectAirSim/packages/projectairsim_ue_plugin/Plugins
          artifactName: 'ProjectAirSim_Unreal_Plugins'
        displayName: Artifact for Unreal Plugins
        condition: succeededOrFailed()
     
      # Publish Artifact for python client
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Pipeline.Workspace)/ProjectAirSim/client/python
          artifactName: 'ProjectAirSim_Python_clients'
        displayName: Artifact for Python Client
        condition: succeededOrFailed()
     
      # Publish Artifact for ros2 packages
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Pipeline.Workspace)/ProjectAirSim/ros
          artifactName: 'ProjectAirSim_ROS2_packages'
        displayName: Artifact for ROS2 Packages
        condition: succeededOrFailed()
     
      - template: ./templates/zip_blocks.yml
        parameters:
             releasetag: $(Build.SourceBranchName)
             envName: Blocks
             environmentRepoRoot: ProjectAirSim
        
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: johnnovak_connection
          repositoryName: microsoft/ProjectAirSim
          action: 'create'
          target: $(Build.SourceVersion)
          tagSource: 'userSpecifiedTag'
          tag: $(Build.SourceBranchName)
          isPreRelease: true
          addChangeLog: false
          assets: $(Build.SourceBranchName)/*
        displayName: 'Create new release including environment zip files'
        condition: succeededOrFailed()
   
    #
    #  Build all environments in environments_list
    #  Both environment zip files and final docker images are created.  The zip files are pushed to a gtithub release,
    #    the docker images are pushed to an Azure container registry
    #
  - ${{ each envInfo in parameters.environments_list }}:
  
    - stage: Build_Environment_${{ envInfo.envName }}
      dependsOn: 'Build_Base_Artifacts'
      condition: always()    # until artifacts upload is figured out    
      
      jobs:  
      - job: UbuntuBuild_${{ envInfo.envName }}
        pool:
          name: $(vmss_pool)
        container: unreal5
        timeoutInMinutes: 240
        displayName: 'Build Ubuntu docker containerfor environment ${{ envInfo.envName }}'
        steps:
        - script: |
            echo "Building environment ${{ envInfo.envName }}"
            echo "Build copy type ${{ envInfo.plugin_copy_type }}"
            echo "Build environment repo root ${{ envInfo.envRepoRoot }}"
          displayName: 'Environment name'
          condition: succeededOrFailed()
     
        - checkout: self
          path: ProjectAirSim
          lfs: true
          target: host
       
        - checkout: ${{ envInfo.repository }}
          path: ${{ envInfo.envRepoRoot }}
          lfs: true
          target: host

        - script: |
            sudo apt-get install -y wget
            wget -q ${{ parameters.cesium_release_url }}/${{ parameters.cesium_release }}.zip -P $(Pipeline.Workspace)
            unzip -q $(Pipeline.Workspace)/${{ parameters.cesium_release }}.zip -d $(Pipeline.Workspace)
            rm $(Pipeline.Workspace)/${{ parameters.cesium_release }}.zip
            ls -la $(Pipeline.Workspace)
          displayName: 'Download and extract Cesium Plugin'
          condition: ${{envInfo.use_cesium }}
          target: host
          
        - task: Docker@2
          displayName: Login to Azure Container Registry
          target: host
          inputs:
            command: login
            containerRegistry: $(dockerRegistryServiceConnection)
    
        - task: DownloadPipelineArtifact@2
          inputs:
            source: 'current'
            project: 'Project HAMERITT'
            pipeline: 19  # Projectairsim-Release URL's definitionId
            #runVersion: 'latestFromBranch'
            #runBranch: 'refs/heads/main'
            artifact: 'ProjectAirSim_Unreal_Plugins'
            path: $(Pipeline.Workspace)/${{ envInfo.airsim_plugin_path }}
          displayName: Download Unreal Plugin to environment build stage
    
        - template: ./templates/build_hameritt_environment.yml
          parameters:
            releasetag: $(Build.SourceBranchName)
            docker_source_repo: ${{ parameters.docker_source_repo }}
            docker_base_image: ${{ parameters.docker_base_image }}
            docker_target_image: ${{ parameters.docker_staging_image }}
            docker_base_image_tag: ${{ parameters.docker_base_image_tag }}
            dockerfile: ${{ parameters.dockerfile }}
            envName: ${{ envInfo.envName }}
            projectName: ${{ envInfo.projectName }}
            build_binary_container: ${{ parameters.build_binary_container }}
            dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
            environmentRepoRoot: ${{ envInfo.envRepoRoot }}
            plugin_copy_type: ${{ envInfo.plugin_copy_type }}
            airsim_plugin_path: $(Pipeline.Workspace)/${{ envInfo.airsim_plugin_path }}
            use_cesium: ${{envInfo.use_cesium }}
            cesium_release: ${{ parameters.cesium_release }}
            cesium_plugin_name: ${{ parameters.cesium_plugin_name }}
    
        - task: DownloadPipelineArtifact@2
          inputs:
            source: 'current'
            project: 'Project HAMERITT'
            pipeline: 19  # Projectairsim-Release URL's definitionId
            #runVersion: 'latestFromBranch'
            #runBranch: 'refs/heads/main'
            artifact: 'ProjectAirSim_Python_clients'
            path: $(Pipeline.Workspace)/ProjectAirSim/client/python
          displayName: Download Python CLient
    
        - task: DownloadPipelineArtifact@2
          inputs:
            source: 'current'
            project: 'Project HAMERITT'
            pipeline: 19  # Projectairsim-Release URL's definitionId
            #runVersion: 'latestFromBranch'
            #runBranch: 'refs/heads/main'
            artifact: 'ProjectAirSim_ROS2_packages'
            path: $(Pipeline.Workspace)/ProjectAirSim/ros
          displayName: Download ROS2 Packages
    
        - template: ./templates/build_release_container.yml
          parameters:
            releasetag: $(Build.SourceBranchName)
            docker_source_repo: ${{ parameters.docker_source_repo }}
            docker_base_image: ${{ parameters.docker_base_image }}
            docker_staging_image: ${{ parameters.docker_staging_image }}
            docker_target_image: ${{ parameters.docker_target_image }}
            docker_base_image_tag: ${{ parameters.docker_base_image_tag }}
            dockerfile: ${{ parameters.dockerfile }}
            envName: ${{ envInfo.envName }}
            projectName: ${{ envInfo.projectName }}
            build_binary_container: ${{ parameters.build_binary_container }}
            delete_binary_container: ${{ parameters.delete_binary_container }}
            dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
            environmentRepoRoot: ${{ envInfo.envRepoRoot }}
    
        #
        #  Run environment specific integration tests (when available)
        #

        # Run integration and end to end ROS2 tests
        #- template: ./templates/pytest_integration.yml
        #  parameters:
        #    dockerimage: ${{ parameters.docker_source_repo }}/${{ parameters.docker_staging_image }}:$(Build.SourceBranchName)-${{ parameters.envName }}
      
        #- template: ./templates/colcon_test_docker.yml
        #  parameters:
        #    dockerimage: ${{ parameters.docker_source_repo }}/${{ parameters.docker_staging_image }}:$(Build.SourceBranchName)-${{ parameters.envName }}
    
        #
        #  Push environment docker image to release ACR (when available)
        #
        - task: Docker@2
          displayName: Publish image to Azure Container Registry
          condition: succeededOrFailed()
          target: host
          inputs:
            command: Push
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: ${{ parameters.docker_target_image }}
            tags: |
              $(Build.SourceBranchName)-${{ envInfo.envName }}
       
    
        #
        #  Push environment zip artifact to GitHub
        #
        - task: GitHubRelease@1
          inputs:
            gitHubConnection: johnnovak_connection
            repositoryName: microsoft/ProjectAirSim
            action: 'edit'
            assetUploadMode: 'replace'
            target: $(Build.SourceVersion)
            tagSource: 'userSpecifiedTag'
            tag: $(Build.SourceBranchName)
            isPreRelease: true
            addChangeLog: false
            assets: $(Build.SourceBranchName)/*
          displayName: 'Add environment zip files to existing release'
          condition: succeededOrFailed()
